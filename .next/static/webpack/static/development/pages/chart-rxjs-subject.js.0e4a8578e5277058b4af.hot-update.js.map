{"version":3,"file":"static/webpack/static\\development\\pages\\chart-rxjs-subject.js.0e4a8578e5277058b4af.hot-update.js","sources":["webpack:///./store/water-usage.js"],"sourcesContent":["//Inspired from https://blog.logrocket.com/rxjs-with-react-hooks-for-state-management/\r\n//and https://rxjs.dev/api/webSocket/webSocket\r\n\r\nimport { webSocket } from 'rxjs/webSocket';\r\n\r\nconst subject = webSocket(\"wss://echo.websocket.org/\");\r\n\r\n\r\nconst initialState = {\r\n    data: [], //array of objects like: [{month:\"Oct 19\", volume: 2500}, ... ]\r\n    newDataCount: 0 \r\n};\r\n\r\nlet state = initialState;\r\n\r\nconst waterUsageStore = {\r\n    init: () => {\r\n        state = {...state, newDataCount: 0};\r\n        subject.next(state);\r\n    },\r\n\r\n    subscribe: setState => subject.subscribe(setState),\r\n\r\n    sendMessage: message => {\r\n        state = {\r\n            ...state,\r\n            data: [...state.data, message],\r\n            newDataCount: state.newDataCount + 1\r\n        };\r\n        subject.next(state);\r\n    },\r\n\r\n    getCount: () => state.newDataCount,\r\n\r\n    initialState\r\n};\r\n\r\n\r\n//These functions are used for mocking data that is echoed by the websocket\r\nconst getRndInteger = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n}\r\nconst getNearest100 = (min, max) => {\r\n    const rnd = getRndInteger(min, max);\r\n    return Math.round(rnd/100)*100; //rounds to nearest 100\r\n}\r\nconst buildMsg = () => {\r\n    return ({ month: `Month ${waterUsageStore.getCount()}`, volume: getNearest100(500, 7500) });\r\n}\r\nconst sendMessages = () => {\r\n    const sendMsgs = setInterval(() => { waterUsageStore.sendMessage(buildMsg()) }, 2000);\r\n    setTimeout(() => { clearInterval(sendMsgs)}, 15000);\r\n}\r\n\r\n\r\nexport { waterUsageStore, sendMessages }"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAEA;AAAA;AAAA;AAEA;AAnBA;AACA;AAuBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;A","sourceRoot":""}