{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//Inspired from https://blog.logrocket.com/rxjs-with-react-hooks-for-state-management/\n//and https://rxjs.dev/api/webSocket/webSocket\nimport { webSocket } from 'rxjs/webSocket';\nvar subject = webSocket(\"wss://echo.websocket.org/\");\nvar initialState = {\n  data: [],\n  //array of objects like: [{month:\"Oct 19\", volume: 2500}, ... ]\n  newDataCount: 0\n};\nvar state = initialState;\nvar waterUsageStore = {\n  init: function init() {\n    state = _objectSpread({}, state, {\n      newDataCount: 0\n    });\n    subject.next(state);\n  },\n  subscribe: function subscribe(setState) {\n    return subject.subscribe(setState);\n  },\n  sendMessage: function sendMessage(message) {\n    state = _objectSpread({}, state, {\n      data: [].concat(_toConsumableArray(state.data), [message]),\n      newDataCount: state.newDataCount + 1\n    });\n    subject.next(state);\n  },\n  getCount: function getCount() {\n    return state.newDataCount;\n  },\n  initialState: initialState\n}; //These functions are used for mocking data that is echoed by the websocket\n\nvar getRndInteger = function getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nvar getNearest100 = function getNearest100(min, max) {\n  var rnd = getRndInteger(min, max);\n  return Math.round(rnd / 100) * 100; //rounds to nearest 100\n};\n\nvar buildMsg = function buildMsg() {\n  return {\n    month: \"Month \".concat(waterUsageStore.getCount()),\n    volume: getNearest100(500, 7500)\n  };\n};\n\nvar sendMessages = function sendMessages() {\n  //echo a message every 2 seconds\n  var sendMsgs = setInterval(function () {\n    waterUsageStore.sendMessage(buildMsg());\n  }, 2000); //stop echoing after 30 seconds\n\n  setTimeout(function () {\n    clearInterval(sendMsgs);\n  }, 30000);\n};\n\nexport { waterUsageStore, sendMessages };","map":null,"metadata":{},"sourceType":"module"}