{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//Inspired from https://blog.logrocket.com/rxjs-with-react-hooks-for-state-management/\n//and https://rxjs.dev/api/webSocket/webSocket\nimport { webSocket } from 'rxjs/webSocket';\nvar subject = webSocket(\"wss://echo.websocket.org/\");\nvar initialState = {\n  count: 0,\n  data: [] //array of objects like: [{month:\"Oct 19\", volume: 2500}, ... ]\n\n};\nvar state = initialState;\nvar waterUsageStore = {\n  init: function init() {\n    state = _objectSpread({}, state, {\n      count: 0\n    });\n    subject.next(state);\n  },\n  subscribe: function subscribe(setState) {\n    return subject.subscribe(setState);\n  },\n  sendMessage: function sendMessage(message) {\n    state = _objectSpread({}, state, {\n      data: [].concat(_toConsumableArray(state.data), [message]),\n      count: state.count + 1\n    });\n    subject.next(state);\n  },\n  initialState: initialState\n}; //These functions are used for mocking data that is echoed by the websocket\n\nvar getRndInteger = function getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nvar getNearest100 = function getNearest100(min, max) {\n  var rnd = getRndInteger(min, max);\n  return Math.round(rnd / 100) * 100; //rounds to nearest 100\n};\n\nvar buildMsg = function buildMsg() {\n  return {\n    month: \"Month \".concat(waterUsageStore.count),\n    volume: getNearest100(500, 7500)\n  };\n};\n\nvar sendMessages = function sendMessages() {\n  var sendMsgs = setInterval(function () {\n    waterUsageStore.sendMessage(buildMsg());\n  }, 2000);\n  setTimeout(function () {\n    clearInterval(sendMsgs);\n  }, 15000);\n};\n\nexport { waterUsageStore, sendMessages };","map":{"version":3,"sources":["C:/Users/figuajardo/Sites/kendo-react-nextjs/store/water-usage.js"],"names":["webSocket","subject","initialState","count","data","state","waterUsageStore","init","next","subscribe","setState","sendMessage","message","getRndInteger","min","max","Math","floor","random","getNearest100","rnd","round","buildMsg","month","volume","sendMessages","sendMsgs","setInterval","setTimeout","clearInterval"],"mappings":";;AAAA;AACA;AAEA,SAASA,SAAT,QAA0B,gBAA1B;AAEA,IAAMC,OAAO,GAAGD,SAAS,CAAC,2BAAD,CAAzB;AAGA,IAAME,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CADU;AAEjBC,EAAAA,IAAI,EAAE,EAFW,CAER;;AAFQ,CAArB;AAKA,IAAIC,KAAK,GAAGH,YAAZ;AAEA,IAAMI,eAAe,GAAG;AACpBC,EAAAA,IAAI,EAAE,gBAAM;AACRF,IAAAA,KAAK,qBAAOA,KAAP;AAAcF,MAAAA,KAAK,EAAE;AAArB,MAAL;AACAF,IAAAA,OAAO,CAACO,IAAR,CAAaH,KAAb;AACH,GAJmB;AAMpBI,EAAAA,SAAS,EAAE,mBAAAC,QAAQ;AAAA,WAAIT,OAAO,CAACQ,SAAR,CAAkBC,QAAlB,CAAJ;AAAA,GANC;AAQpBC,EAAAA,WAAW,EAAE,qBAAAC,OAAO,EAAI;AACpBP,IAAAA,KAAK,qBACEA,KADF;AAEDD,MAAAA,IAAI,+BAAMC,KAAK,CAACD,IAAZ,IAAkBQ,OAAlB,EAFH;AAGDT,MAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAHpB,MAAL;AAKAF,IAAAA,OAAO,CAACO,IAAR,CAAaH,KAAb;AACH,GAfmB;AAiBpBH,EAAAA,YAAY,EAAZA;AAjBoB,CAAxB,C,CAqBA;;AACA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA+CA,GAAtD;AACH,CAFD;;AAGA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACL,GAAD,EAAMC,GAAN,EAAc;AAChC,MAAMK,GAAG,GAAGP,aAAa,CAACC,GAAD,EAAMC,GAAN,CAAzB;AACA,SAAOC,IAAI,CAACK,KAAL,CAAWD,GAAG,GAAC,GAAf,IAAoB,GAA3B,CAFgC,CAEA;AACnC,CAHD;;AAIA,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,SAAQ;AAAEC,IAAAA,KAAK,kBAAWjB,eAAe,CAACH,KAA3B,CAAP;AAA2CqB,IAAAA,MAAM,EAAEL,aAAa,CAAC,GAAD,EAAM,IAAN;AAAhE,GAAR;AACH,CAFD;;AAGA,IAAMM,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAM;AAAErB,IAAAA,eAAe,CAACK,WAAhB,CAA4BW,QAAQ,EAApC;AAAyC,GAAlD,EAAoD,IAApD,CAA5B;AACAM,EAAAA,UAAU,CAAC,YAAM;AAAEC,IAAAA,aAAa,CAACH,QAAD,CAAb;AAAwB,GAAjC,EAAmC,KAAnC,CAAV;AACH,CAHD;;AAMA,SAASpB,eAAT,EAA0BmB,YAA1B","sourcesContent":["//Inspired from https://blog.logrocket.com/rxjs-with-react-hooks-for-state-management/\r\n//and https://rxjs.dev/api/webSocket/webSocket\r\n\r\nimport { webSocket } from 'rxjs/webSocket';\r\n\r\nconst subject = webSocket(\"wss://echo.websocket.org/\");\r\n\r\n\r\nconst initialState = {\r\n    count: 0,\r\n    data: [] //array of objects like: [{month:\"Oct 19\", volume: 2500}, ... ]\r\n};\r\n\r\nlet state = initialState;\r\n\r\nconst waterUsageStore = {\r\n    init: () => {\r\n        state = {...state, count: 0};\r\n        subject.next(state);\r\n    },\r\n\r\n    subscribe: setState => subject.subscribe(setState),\r\n\r\n    sendMessage: message => {\r\n        state = {\r\n            ...state,\r\n            data: [...state.data, message],\r\n            count: state.count + 1\r\n        };\r\n        subject.next(state);\r\n    },\r\n\r\n    initialState\r\n};\r\n\r\n\r\n//These functions are used for mocking data that is echoed by the websocket\r\nconst getRndInteger = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n}\r\nconst getNearest100 = (min, max) => {\r\n    const rnd = getRndInteger(min, max);\r\n    return Math.round(rnd/100)*100; //rounds to nearest 100\r\n}\r\nconst buildMsg = () => {\r\n    return ({ month: `Month ${waterUsageStore.count}`, volume: getNearest100(500, 7500) });\r\n}\r\nconst sendMessages = () => {\r\n    const sendMsgs = setInterval(() => { waterUsageStore.sendMessage(buildMsg()) }, 2000);\r\n    setTimeout(() => { clearInterval(sendMsgs)}, 15000);\r\n}\r\n\r\n\r\nexport { waterUsageStore, sendMessages }"]},"metadata":{},"sourceType":"module"}