{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\figuajardo\\\\Sites\\\\kendo-react-nextjs\\\\pages\\\\rxjs-websocket.js\";\nimport React, { useState, useEffect } from 'react';\nimport Nav from '../components/nav';\nimport { webSocket } from 'rxjs/webSocket';\nvar subject = webSocket('wss://echo.websocket.org/');\n\nvar getRndInteger = function getRndInteger(min, max) {\n  var rnd = Math.floor(Math.random() * (max - min + 1)) + min;\n  return Math.round(rnd / 100) * 100; //rounds to nearest 100\n};\n\nvar buildMsg = function buildMsg() {\n  return _JSON$stringify({\n    month: \"Oct 19\",\n    volume: getRndInteger(500, 7500)\n  });\n};\n\nvar sendMessages = function sendMessages(subject) {\n  var sendMsgs = setInterval(function () {\n    subject.next(buildMsg());\n  }, 2000);\n  setTimeout(function () {\n    clearInterval(sendMsgs);\n  }, 15000);\n};\n\nvar RxJSWebsocket = function RxJSWebsocket() {\n  useEffect(function () {\n    subject.subscribe(function (msg) {\n      return console.log('message received: ' + _JSON$stringify(msg));\n    }, // Called whenever there is a message from the server.\n    function (err) {\n      return console.log(err);\n    }, // Called if at any point WebSocket API signals some kind of error.\n    function () {\n      return console.log('complete');\n    } // Called when connection is closed (for whatever reason).\n    );\n    subject.next({\n      message: 'some message'\n    });\n    sendMessages(subject); // This will send a message to the server once a connection is made. Remember value is serialized with JSON.stringify by default!\n    //subject.complete(); // Closes the connection.\n    //subject.error({ code: 4000, reason: 'I think our app just broke!' });\n    // Also closes the connection, but let's the server know that this closing is caused by some error.\n  });\n  return React.createElement(React.Fragment, null, React.createElement(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"This is the RxJSWebsocket page.\"));\n};\n\nexport default RxJSWebsocket;","map":{"version":3,"sources":["C:/Users/figuajardo/Sites/kendo-react-nextjs/pages/rxjs-websocket.js"],"names":["React","useState","useEffect","Nav","webSocket","subject","getRndInteger","min","max","rnd","Math","floor","random","round","buildMsg","month","volume","sendMessages","sendMsgs","setInterval","next","setTimeout","clearInterval","RxJSWebsocket","subscribe","msg","console","log","err","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,IAAMC,OAAO,GAAGD,SAAS,CAAC,2BAAD,CAAzB;;AAEA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA+CA,GAA3D;AACA,SAAOG,IAAI,CAACG,KAAL,CAAWJ,GAAG,GAAC,GAAf,IAAoB,GAA3B,CAFgC,CAEA;AACnC,CAHD;;AAKA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,SAAO,gBAAe;AAAEC,IAAAA,KAAK,EAAE,QAAT;AAAmBC,IAAAA,MAAM,EAAEV,aAAa,CAAC,GAAD,EAAM,IAAN;AAAxC,GAAf,CAAP;AACH,CAFD;;AAIA,IAAMW,YAAY,GAAG,SAAfA,YAAe,CAACZ,OAAD,EAAa;AAC9B,MAAMa,QAAQ,GAAGC,WAAW,CAAC,YAAM;AAAEd,IAAAA,OAAO,CAACe,IAAR,CAAaN,QAAQ,EAArB;AAA0B,GAAnC,EAAqC,IAArC,CAA5B;AACAO,EAAAA,UAAU,CAAC,YAAM;AAAEC,IAAAA,aAAa,CAACJ,QAAD,CAAb;AAAwB,GAAjC,EAAmC,KAAnC,CAAV;AACH,CAHD;;AAKA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBrB,EAAAA,SAAS,CAAE,YAAM;AACbG,IAAAA,OAAO,CAACmB,SAAR,CACI,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAY,uBAAuB,gBAAeF,GAAf,CAAnC,CAAJ;AAAA,KADP,EACoE;AAChE,cAAAG,GAAG;AAAA,aAAIF,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAAJ;AAAA,KAFP,EAE6B;AACzB;AAAA,aAAMF,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAAA,KAHJ,CAGkC;AAHlC;AAMAtB,IAAAA,OAAO,CAACe,IAAR,CAAa;AAAES,MAAAA,OAAO,EAAE;AAAX,KAAb;AACAZ,IAAAA,YAAY,CAACZ,OAAD,CAAZ,CARa,CASb;AAEA;AAEA;AACA;AACH,GAfQ,CAAT;AAkBA,SACI,0CACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFJ,CADJ;AAQH,CA3BD;;AA6BA,eAAekB,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Nav from '../components/nav';\r\nimport { webSocket } from 'rxjs/webSocket';\r\nconst subject = webSocket('wss://echo.websocket.org/');\r\n\r\nconst getRndInteger = (min, max) => {\r\n    const rnd = Math.floor(Math.random() * (max - min + 1) ) + min;\r\n    return Math.round(rnd/100)*100; //rounds to nearest 100\r\n}\r\n\r\nconst buildMsg = () => {\r\n    return JSON.stringify({ month: \"Oct 19\", volume: getRndInteger(500, 7500) });\r\n}\r\n\r\nconst sendMessages = (subject) => {\r\n    const sendMsgs = setInterval(() => { subject.next(buildMsg()) }, 2000);\r\n    setTimeout(() => { clearInterval(sendMsgs)}, 15000);\r\n}\r\n\r\nconst RxJSWebsocket = () => {\r\n    useEffect( () => {\r\n        subject.subscribe(\r\n            msg => console.log('message received: ' + JSON.stringify(msg)), // Called whenever there is a message from the server.\r\n            err => console.log(err), // Called if at any point WebSocket API signals some kind of error.\r\n            () => console.log('complete') // Called when connection is closed (for whatever reason).\r\n        );\r\n    \r\n        subject.next({ message: 'some message' });\r\n        sendMessages(subject);\r\n        // This will send a message to the server once a connection is made. Remember value is serialized with JSON.stringify by default!\r\n    \r\n        //subject.complete(); // Closes the connection.\r\n    \r\n        //subject.error({ code: 4000, reason: 'I think our app just broke!' });\r\n        // Also closes the connection, but let's the server know that this closing is caused by some error.\r\n    });\r\n    \r\n\r\n    return (\r\n        <>\r\n            <Nav />\r\n            <div>\r\n                This is the RxJSWebsocket page.\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RxJSWebsocket;"]},"metadata":{},"sourceType":"module"}