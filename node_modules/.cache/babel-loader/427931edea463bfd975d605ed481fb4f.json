{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\figuajardo\\\\Sites\\\\kendo-react-nextjs\\\\pages\\\\chart.js\";\nimport '@progress/kendo-theme-default/dist/all.css';\nimport Nav from '../components/nav';\nimport ChartContainer from '../components/chart-container';\nimport { configureWs } from '../components/websocket';\nimport React, { useState, useEffect } from 'react';\nvar ws = null; // reference to websocket\n\nvar seriesData = [{\n  month: \"Aug 18\",\n  volume: 6000\n}, {\n  month: \"Sep 18\",\n  volume: 3000\n}, {\n  month: \"Oct 18\",\n  volume: 1500\n}, {\n  month: \"Nov 18\",\n  volume: 2250\n}, {\n  month: \"Dec 18\",\n  volume: 1500\n}, {\n  month: \"Jan 19\",\n  volume: 3000\n}, {\n  month: \"Feb 19\",\n  volume: 2250\n}, {\n  month: \"Mar 19\",\n  volume: 1500\n}, {\n  month: \"Apr 19\",\n  volume: 2250\n}, {\n  month: \"May 19\",\n  volume: 1500\n}, {\n  month: \"Jun 19\",\n  volume: 2250\n}, {\n  month: \"Jul 19\",\n  volume: 2250\n}, {\n  month: \"Aug 19\",\n  volume: 4500\n}, {\n  month: \"Sep 19\",\n  volume: 7500\n}]; // Use with: <ChartContainer seriesData={seriesData2} categories={categories} />\n\nvar seriesData2 = [6000, 3000, 1500, 2250, 1500, 3000, 2250, 1500, 2250, 1500, 2250, 2250, 4500, 7500, 4500];\nvar categories = ['Aug 18', 'Sep 18', 'Oct 18', 'Nov 18', 'Dec 18', 'Jan 19', 'Feb 19', 'Mar 19', 'Apr 19', 'May 19', 'Jun 19', 'Jul 19', 'Aug 19', 'Sep 19', 'Oct 19'];\n\nvar getRndInteger = function getRndInteger(min, max) {\n  var rnd = Math.floor(Math.random() * (max - min + 1)) + min;\n  return Math.round(rnd / 100) * 100; //rounds to nearest 100\n};\n\nvar buildMsg = function buildMsg() {\n  return _JSON$stringify({\n    month: \"Oct 19\",\n    volume: getRndInteger(500, 7500)\n  });\n};\n\nvar sendMessages = function sendMessages() {\n  var sendMsgs = setInterval(function () {\n    ws.send(buildMsg());\n  }, 2000);\n  setTimeout(function () {\n    clearInterval(sendMsgs);\n  }, 15000);\n};\n\nvar Chart = function Chart() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataFromServer = _useState2[0],\n      setDataFromServer = _useState2[1];\n\n  useEffect(function () {\n    ws = configureWs();\n\n    ws.onmessage = function (evt) {\n      // may need to parse data sent from the websocket server\n      var msg = JSON.parse(evt.data);\n      console.log('onmessage: ', evt.data); //setDataFromServer([...dataFromServer, msg]);\n      //setDataFromServer([...dataFromServer, evt.data]);\n\n      setDataFromServer(msg);\n    };\n\n    sendMessages(); // simulate a live websocket by sending and echoing messages\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(ChartContainer, {\n    seriesData: [].concat(seriesData, [dataFromServer]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"The websocket returned: \", dataFromServer));\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/figuajardo/Sites/kendo-react-nextjs/pages/chart.js"],"names":["Nav","ChartContainer","configureWs","React","useState","useEffect","ws","seriesData","month","volume","seriesData2","categories","getRndInteger","min","max","rnd","Math","floor","random","round","buildMsg","sendMessages","sendMsgs","setInterval","send","setTimeout","clearInterval","Chart","dataFromServer","setDataFromServer","onmessage","evt","msg","JSON","parse","data","console","log"],"mappings":"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","sourcesContent":["import '@progress/kendo-theme-default/dist/all.css'\r\nimport Nav from '../components/nav'\r\nimport ChartContainer from '../components/chart-container'\r\nimport { configureWs } from '../components/websocket'\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nlet ws = null; // reference to websocket\r\n\r\nlet seriesData = [\r\n    { month: \"Aug 18\", volume: 6000 },\r\n    { month: \"Sep 18\", volume: 3000 },\r\n    { month: \"Oct 18\", volume: 1500 },\r\n    { month: \"Nov 18\", volume: 2250 },\r\n    { month: \"Dec 18\", volume: 1500 },\r\n    { month: \"Jan 19\", volume: 3000 },\r\n    { month: \"Feb 19\", volume: 2250 },\r\n    { month: \"Mar 19\", volume: 1500 },\r\n    { month: \"Apr 19\", volume: 2250 },\r\n    { month: \"May 19\", volume: 1500 },\r\n    { month: \"Jun 19\", volume: 2250 },\r\n    { month: \"Jul 19\", volume: 2250 },\r\n    { month: \"Aug 19\", volume: 4500 },\r\n    { month: \"Sep 19\", volume: 7500 }\r\n];\r\n\r\n// Use with: <ChartContainer seriesData={seriesData2} categories={categories} />\r\nconst seriesData2 = [\r\n    6000, \r\n    3000, \r\n    1500, \r\n    2250, \r\n    1500,\r\n    3000,\r\n    2250,\r\n    1500,\r\n    2250,\r\n    1500,\r\n    2250,\r\n    2250,\r\n    4500,\r\n    7500,\r\n    4500\r\n];\r\nconst categories = [\r\n    'Aug 18',\r\n    'Sep 18',\r\n    'Oct 18',\r\n    'Nov 18',\r\n    'Dec 18',\r\n    'Jan 19',\r\n    'Feb 19',\r\n    'Mar 19',\r\n    'Apr 19',\r\n    'May 19',\r\n    'Jun 19',\r\n    'Jul 19',\r\n    'Aug 19',\r\n    'Sep 19',\r\n    'Oct 19',\r\n];\r\n\r\nconst getRndInteger = (min, max) => {\r\n    const rnd = Math.floor(Math.random() * (max - min + 1) ) + min;\r\n    return Math.round(rnd/100)*100; //rounds to nearest 100\r\n}\r\n\r\nconst buildMsg = () => {\r\n    return JSON.stringify({ month: \"Oct 19\", volume: getRndInteger(500, 7500) });\r\n}\r\n\r\nconst sendMessages = () => {\r\n    const sendMsgs = setInterval(() => { ws.send(buildMsg()) }, 2000);\r\n    setTimeout(() => { clearInterval(sendMsgs)}, 15000);\r\n}\r\n\r\nconst Chart = () => {\r\n    const [dataFromServer, setDataFromServer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        ws = configureWs();\r\n        ws.onmessage = evt => {\r\n            // may need to parse data sent from the websocket server\r\n            const msg = JSON.parse(evt.data)\r\n            console.log('onmessage: ', evt.data);\r\n            //setDataFromServer([...dataFromServer, msg]);\r\n            //setDataFromServer([...dataFromServer, evt.data]);\r\n            setDataFromServer(msg);\r\n        }\r\n        sendMessages(); // simulate a live websocket by sending and echoing messages\r\n    }, []);\r\n\r\n    return (\r\n    <>\r\n        <Nav />\r\n        <ChartContainer seriesData={[...seriesData, dataFromServer]} />\r\n        <div>\r\n                The websocket returned: {dataFromServer}\r\n            </div>\r\n    </>)\r\n};\r\n\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}